// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Steps components ErroredStep renders correctly 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <ErroredStep
        Component={[Function]}
        customText={
          <FormattedMessage
            defaultMessage="There was a problem while trying to add your source. Please try again. If the error persists, open a support case."
            id="wizard.errorText"
          />
        }
        onClose={[MockFunction]}
        returnButtonTitle="Go back to my application"
        title={
          <FormattedMessage
            defaultMessage="Something went wrong"
            id="wizard.unsuccConfiguration"
          />
        }
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    color="var(--pf-global--danger-color--100)"
                    icon={[Function]}
                  >
                    <ExclamationCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                      color="var(--pf-global--danger-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon pf-u-mb-0"
                        fill="var(--pf-global--danger-color--100)"
                        height="1em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.125em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                          transform=""
                        />
                      </svg>
                    </ExclamationCircleIcon>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      <FormattedMessage
                        defaultMessage="Something went wrong"
                        id="wizard.unsuccConfiguration"
                      >
                        Something went wrong
                      </FormattedMessage>
                    </h2>
                  </Component>
                  <Component
                    className="ins-c-sources__wizard--step-text"
                  >
                    <div
                      className="pf-c-empty-state__body ins-c-sources__wizard--step-text"
                    >
                      <FormattedMessage
                        defaultMessage="There was a problem while trying to add your source. Please try again. If the error persists, open a support case."
                        id="wizard.errorText"
                      >
                        There was a problem while trying to add your source. Please try again. If the error persists, open a support case.
                      </FormattedMessage>
                    </div>
                  </Component>
                  <Component
                    onClick={[MockFunction]}
                    variant="primary"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-primary"
                      data-ouia-component-id={null}
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe={true}
                      disabled={false}
                      onClick={[MockFunction]}
                      tabIndex={null}
                      type="button"
                    >
                      Go back to my application
                    </button>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </ErroredStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;

exports[`Steps components FinishedStep renders correctly 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <FinishedStep
        hideSourcesButton={false}
        linkText={
          <FormattedMessage
            defaultMessage="Take me to sources"
            id="wizard.toSources"
          />
        }
        onClose={[MockFunction]}
        returnButtonTitle="Go back to my application"
        successfulMessage="Here I Am"
        title={
          <FormattedMessage
            defaultMessage="Configuration successful"
            id="wizard.succConfiguration"
          />
        }
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    color="var(--pf-global--success-color--100)"
                    icon={[Function]}
                  >
                    <CheckCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                      color="var(--pf-global--success-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon pf-u-mb-0"
                        fill="var(--pf-global--success-color--100)"
                        height="1em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.125em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"
                          transform=""
                        />
                      </svg>
                    </CheckCircleIcon>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      <FormattedMessage
                        defaultMessage="Configuration successful"
                        id="wizard.succConfiguration"
                      >
                        Configuration successful
                      </FormattedMessage>
                    </h2>
                  </Component>
                  <Component
                    className="ins-c-sources__wizard--step-text"
                  >
                    <div
                      className="pf-c-empty-state__body ins-c-sources__wizard--step-text"
                    >
                      Here I Am
                    </div>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    onClick={[MockFunction]}
                    variant="primary"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-primary pf-u-mt-xl"
                      data-ouia-component-id={null}
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe={true}
                      disabled={false}
                      onClick={[MockFunction]}
                      tabIndex={null}
                      type="button"
                    >
                      Go back to my application
                    </button>
                  </Component>
                  <Component>
                    <div
                      className="pf-c-empty-state__secondary"
                    >
                      <a
                        href="/hybrid/settings/sources"
                      >
                        <Component
                          variant="link"
                        >
                          <button
                            aria-disabled={null}
                            aria-label={null}
                            className="pf-c-button pf-m-link"
                            data-ouia-component-id={null}
                            data-ouia-component-type="PF4/Button"
                            data-ouia-safe={true}
                            disabled={false}
                            tabIndex={null}
                            type="button"
                          >
                            <FormattedMessage
                              defaultMessage="Take me to sources"
                              id="wizard.toSources"
                            >
                              Take me to sources
                            </FormattedMessage>
                          </button>
                        </Component>
                      </a>
                    </div>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </FinishedStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;

exports[`Steps components FinishedStep renders withou takemetosources button 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <FinishedStep
        hideSourcesButton={true}
        linkText={
          <FormattedMessage
            defaultMessage="Take me to sources"
            id="wizard.toSources"
          />
        }
        onClose={[MockFunction]}
        returnButtonTitle="Go back to my application"
        successfulMessage="Here I Am"
        title={
          <FormattedMessage
            defaultMessage="Configuration successful"
            id="wizard.succConfiguration"
          />
        }
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    color="var(--pf-global--success-color--100)"
                    icon={[Function]}
                  >
                    <CheckCircleIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                      color="var(--pf-global--success-color--100)"
                      noVerticalAlign={false}
                      size="sm"
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon pf-u-mb-0"
                        fill="var(--pf-global--success-color--100)"
                        height="1em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.125em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"
                          transform=""
                        />
                      </svg>
                    </CheckCircleIcon>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      <FormattedMessage
                        defaultMessage="Configuration successful"
                        id="wizard.succConfiguration"
                      >
                        Configuration successful
                      </FormattedMessage>
                    </h2>
                  </Component>
                  <Component
                    className="ins-c-sources__wizard--step-text"
                  >
                    <div
                      className="pf-c-empty-state__body ins-c-sources__wizard--step-text"
                    >
                      Here I Am
                    </div>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    onClick={[MockFunction]}
                    variant="primary"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-primary pf-u-mt-xl"
                      data-ouia-component-id={null}
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe={true}
                      disabled={false}
                      onClick={[MockFunction]}
                      tabIndex={null}
                      type="button"
                    >
                      Go back to my application
                    </button>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </FinishedStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;

exports[`Steps components LoadingStep renders correctly 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <LoadingStep
        cancelTitle={
          <FormattedMessage
            defaultMessage="Cancel"
            id="wizard.cancelText"
          />
        }
        customText={
          <FormattedMessage
            defaultMessage="Loading, please wait."
            id="wizard.loadingText"
          />
        }
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    icon={[Function]}
                  >
                    <Component
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                    >
                      <span
                        aria-hidden="true"
                        aria-valuetext="Loading..."
                        className="pf-c-spinner pf-m-xl"
                        role="progressbar"
                      >
                        <span
                          className="pf-c-spinner__clipper"
                        />
                        <span
                          className="pf-c-spinner__lead-ball"
                        />
                        <span
                          className="pf-c-spinner__tail-ball"
                        />
                      </span>
                    </Component>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      <FormattedMessage
                        defaultMessage="Loading, please wait."
                        id="wizard.loadingText"
                      >
                        Loading, please wait.
                      </FormattedMessage>
                    </h2>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </LoadingStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;

exports[`Steps components LoadingStep renders correctly with custom props 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <LoadingStep
        cancelTitle={
          <FormattedMessage
            defaultMessage="Cancel"
            id="wizard.cancelText"
          />
        }
        customText="Here I Am"
        onClose={[MockFunction]}
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    icon={[Function]}
                  >
                    <Component
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                    >
                      <span
                        aria-hidden="true"
                        aria-valuetext="Loading..."
                        className="pf-c-spinner pf-m-xl"
                        role="progressbar"
                      >
                        <span
                          className="pf-c-spinner__clipper"
                        />
                        <span
                          className="pf-c-spinner__lead-ball"
                        />
                        <span
                          className="pf-c-spinner__tail-ball"
                        />
                      </span>
                    </Component>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      Here I Am
                    </h2>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                  >
                    <div
                      className="pf-c-empty-state__secondary pf-u-mt-xl"
                    >
                      <Component
                        onClick={[MockFunction]}
                        variant="link"
                      >
                        <button
                          aria-disabled={null}
                          aria-label={null}
                          className="pf-c-button pf-m-link"
                          data-ouia-component-id={null}
                          data-ouia-component-type="PF4/Button"
                          data-ouia-safe={true}
                          disabled={false}
                          onClick={[MockFunction]}
                          tabIndex={null}
                          type="button"
                        >
                          <FormattedMessage
                            defaultMessage="Cancel"
                            id="wizard.cancelText"
                          >
                            Cancel
                          </FormattedMessage>
                        </button>
                      </Component>
                    </div>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </LoadingStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;

exports[`Steps components TimeoutStep renders correctly 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <TimeoutStep
        onClose={[MockFunction]}
        returnButtonTitle="go back"
        title={
          <FormattedMessage
            defaultMessage="Configuration not yet complete"
            id="wizard.uncompleteConfigurationTitle"
          />
        }
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    color="var(--pf-global--Color--200)"
                    icon={[Function]}
                  >
                    <WrenchIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                      color="var(--pf-global--Color--200)"
                      noVerticalAlign={false}
                      size="sm"
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon pf-u-mb-0"
                        fill="var(--pf-global--Color--200)"
                        height="1em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.125em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"
                          transform=""
                        />
                      </svg>
                    </WrenchIcon>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      <FormattedMessage
                        defaultMessage="Configuration not yet complete"
                        id="wizard.uncompleteConfigurationTitle"
                      >
                        Configuration not yet complete
                      </FormattedMessage>
                    </h2>
                  </Component>
                  <Component>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      <FormattedMessage
                        defaultMessage="We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Sources table."
                        id="wizard.uncompleteConfigurationDescription"
                        values={
                          Object {
                            "newLine": <br />,
                          }
                        }
                      >
                        We are still working to confirm credentials and app settings.
                        <br />
                        To track progress, check the Status column in the Sources table.
                      </FormattedMessage>
                    </div>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    onClick={[MockFunction]}
                    variant="primary"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-primary pf-u-mt-xl"
                      data-ouia-component-id={null}
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe={true}
                      disabled={false}
                      onClick={[MockFunction]}
                      tabIndex={null}
                      type="button"
                    >
                      go back
                    </button>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </TimeoutStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;

exports[`Steps components TimeoutStep renders correctly customized 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <TimeoutStep
        onClose={[MockFunction]}
        returnButtonTitle="go back"
        secondaryActions={
          <button>
            some button here
          </button>
        }
        title="pekny nadpis"
      >
        <Component>
          <div
            className="pf-l-bullseye"
          >
            <Component
              className="pf-u-mt-4xl"
              variant="full"
            >
              <div
                className="pf-c-empty-state pf-u-mt-4xl"
              >
                <div
                  className="pf-c-empty-state__content"
                >
                  <Component
                    className="pf-u-mb-0"
                    color="var(--pf-global--Color--200)"
                    icon={[Function]}
                  >
                    <WrenchIcon
                      aria-hidden="true"
                      className="pf-c-empty-state__icon pf-u-mb-0"
                      color="var(--pf-global--Color--200)"
                      noVerticalAlign={false}
                      size="sm"
                    >
                      <svg
                        aria-hidden="true"
                        aria-labelledby={null}
                        className="pf-c-empty-state__icon pf-u-mb-0"
                        fill="var(--pf-global--Color--200)"
                        height="1em"
                        role="img"
                        style={
                          Object {
                            "verticalAlign": "-0.125em",
                          }
                        }
                        viewBox="0 0 512 512"
                        width="1em"
                      >
                        <path
                          d="M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"
                          transform=""
                        />
                      </svg>
                    </WrenchIcon>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    headingLevel="h2"
                    size="xl"
                  >
                    <h2
                      className="pf-c-title pf-m-xl pf-u-mt-xl"
                    >
                      pekny nadpis
                    </h2>
                  </Component>
                  <Component>
                    <div
                      className="pf-c-empty-state__body"
                    >
                      <FormattedMessage
                        defaultMessage="We are still working to confirm credentials and app settings.{newLine}To track progress, check the Status column in the Sources table."
                        id="wizard.uncompleteConfigurationDescription"
                        values={
                          Object {
                            "newLine": <br />,
                          }
                        }
                      >
                        We are still working to confirm credentials and app settings.
                        <br />
                        To track progress, check the Status column in the Sources table.
                      </FormattedMessage>
                    </div>
                  </Component>
                  <Component
                    className="pf-u-mt-xl"
                    onClick={[MockFunction]}
                    variant="primary"
                  >
                    <button
                      aria-disabled={null}
                      aria-label={null}
                      className="pf-c-button pf-m-primary pf-u-mt-xl"
                      data-ouia-component-id={null}
                      data-ouia-component-type="PF4/Button"
                      data-ouia-safe={true}
                      disabled={false}
                      onClick={[MockFunction]}
                      tabIndex={null}
                      type="button"
                    >
                      go back
                    </button>
                  </Component>
                  <Component>
                    <div
                      className="pf-c-empty-state__secondary"
                    >
                      <button>
                        some button here
                      </button>
                    </div>
                  </Component>
                </div>
              </div>
            </Component>
          </div>
        </Component>
      </TimeoutStep>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;
