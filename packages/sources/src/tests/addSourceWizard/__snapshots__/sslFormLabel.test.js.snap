// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SSLFormLabel renders loading step correctly 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  initialIndex={0}
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntlProvider
      defaultFormats={Object {}}
      defaultLocale="en"
      formats={Object {}}
      locale="en"
      messages={Object {}}
      onError={[Function]}
      textComponent={Symbol(react.fragment)}
    >
      <SSLFormLabel>
        <FormattedMessage
          defaultMessage="SSL Certificate"
          id="wizard.SslCertificate"
        >
          SSL Certificate
        </FormattedMessage>
         
        <Popover
          appendTo={[Function]}
          aria-label="Help text"
          bodyContent={
            <Unknown>
              <Unknown
                component="p"
              >
                <FormattedMessage
                  defaultMessage="You can obtain your OpenShift Container Platform provider’s CA certificate for all endpoints (default, metrics, alerts) from {cmd}."
                  id="wizard.YouCanObtainYourOpenshiftContainerPlatformProviderSCaCertificateForAllEndpointsDefaultMetricsAlertsFrom"
                  values={
                    Object {
                      "cmd": <b>
                        /etc/origin/master/ca.crt
                      </b>,
                    }
                  }
                />
              </Unknown>
              <Unknown
                component="p"
              >
                <FormattedMessage
                  defaultMessage="Paste the output (a block of text starting with --BEGIN CERTIFICATE--) into the Trusted CA Certificates field."
                  id="wizard.PasteTheOutputABlockOfTextStartingWithBeginCertificateIntoTheTrustedCaCertificatesField"
                />
              </Unknown>
            </Unknown>
          }
          boundary="window"
          className=""
          closeBtnAriaLabel="Close"
          distance={25}
          enableFlip={true}
          flipBehavior={
            Array [
              "top",
              "right",
              "bottom",
              "left",
              "top",
              "right",
              "bottom",
            ]
          }
          footerContent={null}
          headerContent={null}
          hideOnOutsideClick={true}
          isVisible={null}
          maxWidth="50%"
          onHidden={[Function]}
          onHide={[Function]}
          onMount={[Function]}
          onShow={[Function]}
          onShown={[Function]}
          position="top"
          shouldClose={[Function]}
          tippyProps={Object {}}
          zIndex={9999}
        >
          <PopoverBase
            appendTo={[Function]}
            arrow={true}
            boundary="window"
            content={<React.Fragment />}
            distance={25}
            flip={true}
            flipBehavior={
              Array [
                "top",
                "right",
                "bottom",
                "left",
                "top",
                "right",
                "bottom",
              ]
            }
            hideOnClick={true}
            interactive={true}
            interactiveBorder={0}
            isVisible={null}
            lazy={true}
            maxWidth="50%"
            onCreate={[Function]}
            onHidden={[Function]}
            onHide={[Function]}
            onMount={[Function]}
            onShow={[Function]}
            onShown={[Function]}
            placement="top"
            popperOptions={
              Object {
                "modifiers": Object {
                  "hide": Object {
                    "enabled": true,
                  },
                  "preventOverflow": Object {
                    "enabled": true,
                  },
                },
              }
            }
            theme="pf-popover"
            trigger="click"
            zIndex={9999}
          >
            <QuestionCircleIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z"
                  transform=""
                />
              </svg>
            </QuestionCircleIcon>
            <Portal
              containerInfo={<div />}
            />
          </PopoverBase>
        </Popover>
      </SSLFormLabel>
    </IntlProvider>
  </Router>
</MemoryRouter>
`;
